/*
  Copy this file as jdbc_url.cfg to take affect.
  jdbc_url.cfg is used to define the jdbc url string for a non-standard jdbc thin client URL, acts as the similar feature like oracle TNS file.
  For example, if the target db is only available via LDAP or ODBC protocal, you need to define it in jdbc_url.cfg, 
    as well as copying the related jar driver files into the "lib\ext" directory if necessary.
  
  Supposing you have defined a connection in jdbc_url.cfg and name it as "db2inst_test", then you can connect to the db via command "conn <user>/<pwd>@db2inst_test"
  
  The configurations must be in valid Lua table format, otherwise the settings will not take affect.
  
  Structure:
                                        / diverClassName     (Optional , unless it's not the default driver)
                       / <Connection#1> - url                (Mandatory, allows the '&' syntaxt depending on database)
       <database type1>- <Global props> \ <other properties> (Optional , user/password/etc) 
     /                 \ <Connection#N> ...
 root- <database type2> ...    
     \
       <database typeN> ...
  
  Where:
  1) If the element in database type is not a table, then consider as a global JDBC property
  2) If the element in database type is a table, then it is a connection specification, containing connection-level JDBC properties  
  
  The final properties can be listed by typing "help -e env.<database-type>.properties", i.e.: help -e env.oracle.properties
*/

return {
    ssh={ -- For SSH, all below fields are mandatory except port, and user/host/port can be combined as 'url'
          -- After that, use "ssh conn orcl0" to connect
        orcl0={host="192.168.176.11",user="oracle",password="oracle",port=22},
        orcl1={url="SSH:oracle@192.168.176.11:22",password="oracle"},
    },
    
    oracle={
        orcl={driverClassName='oracle.jdbc.driver.OracleDriver', url='jdbc:oracle:thin:@localhost:1521/orcl'},
        tos={url='jdbc:oracle:thin:@192.168.176.3:1521/orcl'},
        ["v$session.program"]="JDBC Thin Client",
        
    },
    
    db2={
        db2inst_test={driverClassName = 'com.ibm.db2.jcc.DB2Driver', 
                      url             = 'jdbc:db2://localhost:50000/sample',
                      retrieveMessagesFromServerOnGetMessage='true'
                      },
        },
}