/*[[
    Show chart for gv$active_session_history/dba_hist_active_Sess_history. Usage: @@NAME {[0|inst_id] [-t <minutes>|-r <YYMMDDHH24MI> <YYMMDDHH24MI>]} [-d] [-event|-schema|-sql|-g"<column>"] [-u|-f"<filter>"]
    Based View:
        -d: Query based on dba_hist_active_Sess_history, default as gv$active_session_history
    Counting:
        -sec: count based on unique second, default as "count(1)"
    Time range:
        -t: Define the begin time (sysdate - minutes). i.e.: @@NAME .  10 -t
        -r: Define both begin time and end time in YYMMDDHH24MI format. i.e.: @@NAME . 160412 160413 -r -d
    Filter:    
        -u                     : Filter based on current_schema
        -f"<predicates>"       : Costimized filter
    Grouping:
        -event                 : group by event
        -schema                : group by schema name
        -sql                   : group by sql_id
        -g"<field expressions>": group by customized fields
    --[[
        &V1       : default={&INSTANCE}
        &V2       : default={&STARTTIME}
        &V3       : default={&ENDTIME}
        &VIEW_NAME: default={gv$active_session_history}, d={(select instance_number inst_id,a.* from dba_hist_active_Sess_history a)}
        &TIME_BAND: default={sample_time > sysdate - INTERVAL '3' HOUR},d={sample_time between nvl(to_date(:V2,'YYMMDDHH24MI'),sysdate-interval '3' day) and nvl(to_date(:V3,'YYMMDDHH24MI'),sysdate)}
        &Time_Filter:{
            default={&TIME_BAND},
            t={sample_time > sysdate - :V2/1440}, 
            r={sample_time between nvl(to_date(:V2,'YYMMDDHH24MI'),sysdate-3 and nvl(to_date(:V3,'YYMMDDHH24MI'),sysdate)}
        }    
        &Filter:default={1=1},u={username=nvl('&0',sys_context('userenv','current_schema'))},f={}
        &GROUPS:{
            default={DECODE(session_state, 'ON CPU', DECODE(session_type, 'BACKGROUND', 'BG CPU', 'ON CPU'), wait_class)},
            event={nvl(event,'['||p1text||nullif('|'||p2text,'|')||nullif('|'||p3text,'|')||']')},
            schema={username}, sql={sql_id}, g={}
        }
        &GROUP_NAME : default={Wait Class}, event={Event}, schema={Schema Name}, g={}
        &COUNTER    : default={SUM(&VER3)}, sec={count(distinct sample_time+0)}
        &COUNT_NAME : default={Total Seconds}, sec={Distinct Seconds}
        &UNIT       : default={1}, d={10}
        @VER1       : 11.2={COUNT(DISTINCT SQL_ID||SQL_EXEC_ID)}, default={NULL}
        @VER2       : 11.2={Running SQLs}, default={HIDDEN_}
        @VER3       : 11.2={delta_time*1e-6}, default={&unit}
        @VER4       : 11.2={,SUM(DELTA_READ_IO_BYTES) rb,SUM(DELTA_Write_IO_BYTES) wb},default={}
        @VER5       : 11.2={,SUM(rb) "IO Read Bytes" ,SUM(wb) "IO Write Bytes" },default={}
    ]]--
]]*/

{
    _attrs=[[select 'ASH Chart (Group By "&GROUP_NAME")' title from dual]],
    _sql=[[
        SELECT to_char(MEDIAN(MEDIAN(sample_time)) over(partition by bucket_id),'YYYY-MM-DD HH24:MI') sample_time,
               group_by,sum(cnt) "&COUNT_NAME",SUM(SQLS) "&VER2" &VER5,sums RNK_
        FROM(
             SELECT /*+no_expand*/
                    trunc(sample_time, 'MI') sample_time,
                    &GROUPS AS group_by,
                    &COUNTER cnt,
                    &VER1 SQLS,
                    sum(&counter) over(partition by &GROUPS) sums &VER4,
                    NTILE(1000) over(partition by &GROUPS order by trunc(sample_time, 'MI')) bucket_id
             FROM   &VIEW_NAME a, all_users b
             WHERE  a.user_id=b.user_id
             AND    (&Time_Filter)
             AND    (:V1 IS NULL OR lower(:V1) IN ('0', 'a') OR inst_id = :V1)
             AND    (&Filter)
             AND    (&GROUPS IS NOT NULL)
             GROUP BY trunc(sample_time, 'MI'),&GROUPS
        )
        group by bucket_id,group_by,sums
        order by 1,2
    ]],
}