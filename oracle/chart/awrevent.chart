/*[[
    Generate the graph chart based on wait event of dba_hist_system_event. Usage: @@NAME [<event_id>|<event_abbr>|"<event_name>"|"<wait_class>"] [inst_id] [yymmddhh24mi] [yymmddhh24mi] [-f"<filter>" [-f1"<filter>"]]
    Impacted by settings: starttime,endtime,instance
    inst_id: Default as current instance, other options are:
                0         - Separate all instances
                a         - Group all instances
                <inst_id> - Only the specific instance
    -f     : User-defined filter. For example, -f"wait_class in('User I/O','System I/O')"
    -e     : Group by event name, default is wait class.
    Examples:   
      1) @@NAME: show all events group by wait_class within current instance
      2) @@NAME . 0: show all events group by wait_class,instance for all instances
      3) @@NAME "user i/o": show events belong to group "User I/O" group by event name
      4) @@NAME "db file sequential read" or awrevent dfsr: show the chart on "db file sequential read" event
      5) @@NAME "user i/o" a avg: show events belong to group "User I/O" group by event name based on avg time per request
    --[[
        &f0 : default={0},f={}
        &f1 : default={:V1 IS NULL OR LOWER(:V1) IN (lower(wait_class),event_name,abbr,LOWER(event_id))}, f={}
        &grp: default={wait_class}, e={event_name}
        &ADDITIONAL_FILTER: default={1=1}, f1={}
    --]]
]]*/
{
    _attrs=[[
        SELECT a.*,'System Wait Event ('||filter||') Group by '||group_by title
        FROM (     
            SELECT decode(q'[&F0]','0',NVL2(:V1,FIELD_NAME || ' = ''' || FIELD_VALUE||'''','Wait_Class != ''Idle'''),q'[&F0]') filter,
                   case when q'[&F0]'='0' then nvl2(:V1,'event_name','&grp') when lower(q'[&F0]') not like '%event_name%' then 'wait_class' else 'event_name' end group_by
            FROM   (SELECT CASE WHEN lower(wait_class) = LOWER(:V1) OR :V1 IS NULL THEN 'Wait_Class' ELSE 'Event_name' END FIELD_NAME,
                           CASE WHEN lower(wait_class) = LOWER(:V1) OR :V1 IS NULL THEN wait_class ELSE event_name END FIELD_VALUE
                     FROM  (select /*+merge*/ s.*,
                                   lower(name) event_name,
                                   lower(LOWER(regexp_replace(NAME || ' ', '(\w)[^ ]* ', '\1'))) abbr
                            from v$event_name s)
                     WHERE  ROWNUM < 2 and (&F1))) a]],
    _sql=[[
        SELECT time,event,round(total_time*1e-6,1) "Seconds per Minute",count "Requests per Minute",round(total_time/count/1000,2) "Milliseconds per Request",
               sum(total_time) over(partition by event) RNK_
        FROM   (SELECT to_char(MAX(end_time), 'YYYY-MM-DD HH24:MI') TIME, event,
                       greatest(SUM(v1) - LAG(SUM(v1)) OVER(PARTITION BY event ORDER BY end_time),0) total_time,
                       greatest(SUM(v2) - LAG(SUM(v2)) OVER(PARTITION BY event ORDER BY end_time),0) count
                FROM  (SELECT /*+merge*/
                               A.*,
                               &group_by || decode(nvl(lower(:V2), 'a'), 'a', NULL, ' #' || inst_id) event,
                               TIME_WAITED/Slot_size v1, TOTAL_WAITS/Slot_size v2,AVG_WAITED v3
                       FROM   (SELECT /*+merge no_expand ordered_predicates*/
                                      instance_number inst_id,
                                      end_interval_time+0 end_time,
                                      wait_class,event_name,
                                      ((end_interval_time+0)-(begin_interval_time+0))*1440 Slot_size,
                                      TIME_WAITED_MICRO TIME_WAITED,
                                      TIME_WAITED_MICRO/TOTAL_WAITS AVG_WAITED,
                                      TOTAL_WAITS
                               FROM   DBA_HIST_SYSTEM_EVENT NATURAL
                               JOIN   dba_hist_snapshot NATURAL
                               WHERE  end_interval_time+0 between
                                   NVL(to_date(NVL(:V3,:starttime),'yymmddhh24miss'),sysdate-7) AND
                                   NVL(to_date(NVL(:V4,:endtime),'yymmddhh24miss'),sysdate)
                               AND    (:V2 IS NULL AND instance_number = nvl(:instance,userenv('instance')) OR lower(nvl(:V2, '0')) IN ('0', 'a') OR instance_number = :V2)
                               AND    (&filter) AND (&ADDITIONAL_FILTER) ) a)
                 GROUP  BY event, end_time) a
        WHERE  (count > 0 and total_time>0)
        ORDER  BY 1]],
    _pivot=true,
    labelsSeparateLines=true,
    labelsKMB=true,
    height=400,
}