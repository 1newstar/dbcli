/*[[
    Generate the graph chart based on wait event of dba_hist_system_event. Usage: awrevent [<event_id>|<event_abbr>|"<event_name>"|"<wait_class>"]|-f"<filter>"  [inst_id] [-f1"<filter>"]
    inst_id: Default as current instance, other options are:
                0         - Separate all instances
                a         - Group all instances
                <inst_id> - Only the specific instance
    -f     : User-defined filter. For example, -f"wait_class in('User I/O','System I/O')"
    Examples:   
      1) awrevent: show all events group by wait_class within current instance
      2) awrevent . 0: show all events group by wait_class,instance for all instances
      3) awrevent "user i/o": show events belong to group "User I/O" group by event name
      4) awrevent "db file sequential read" or awrevent dfsr: show the chart on "db file sequential read" event
      5) awrevent "user i/o" a avg: show events belong to group "User I/O" group by event name based on avg time per request
    --[[
        &f0: default={0},f={}
        &f1: default={:V1 IS NULL OR LOWER(:V1) IN (lower(wait_class),event_name,abbr,LOWER(event_id))}, f={}
        &ADDITIONAL_FILTER: default={1=1}, f1={}
    --]]
]]*/
{
    _attrs=[[
        SELECT a.*,'System Wait Event ('||filter||') Group by '||group_by title
        FROM (     
            SELECT decode(q'[&F0]','0',NVL2(:V1,FIELD_NAME || ' = ''' || FIELD_VALUE||'''','Wait_Class != ''Idle'''),q'[&F0]') filter,
                   --'AWR Snap Interval : 30 Minutes' xlabel,
                   case when q'[&F0]'='0' then nvl2(:V1,'event_name','wait_class') when lower(q'[&F0]') not like '%event_name%' then 'wait_class' else 'event_name' end group_by
            FROM   (SELECT CASE WHEN lower(wait_class) = LOWER(:V1) OR :V1 IS NULL THEN 'Wait_Class' ELSE 'Event_name' END FIELD_NAME,
                           CASE WHEN lower(wait_class) = LOWER(:V1) OR :V1 IS NULL THEN wait_class ELSE event_name END FIELD_VALUE
                     FROM  (select /*+merge*/ s.*,
                                   lower(name) event_name,
                                   lower(LOWER(regexp_replace(NAME || ' ', '(\w)[^ ]* ', '\1'))) abbr
                            from v$event_name s)
                     WHERE  ROWNUM < 2 and (&F1))) a]],
    _sql=[[
        SELECT time,event,round(total_time*1e-6,1) "Seconds per Slot",count "Requests per Slot",round(total_time/count/1000,2) "Milliseconds per Request"
        FROM   (SELECT to_char(MAX(end_interval_time), 'YYYY-MM-DD HH24:MI') TIME, event,
                       greatest(SUM(v1) - LAG(SUM(v1)) OVER(PARTITION BY STARTUP_TIME, event ORDER BY snap_id),0) total_time,
                       greatest(SUM(v2) - LAG(SUM(v2)) OVER(PARTITION BY STARTUP_TIME, event ORDER BY snap_id),0) count
                FROM  (SELECT /*+merge*/
                               A.*,
                               &group_by || decode(nvl(lower(:V2), 'a'), 'a', NULL, ' #' || instance_number) event,
                               TIME_WAITED_MICRO v1, TOTAL_WAITS v2,TIME_WAITED_MICRO/TOTAL_WAITS v3
                       FROM   (SELECT /*+merge no_expand ordered_predicates*/*
                               FROM   DBA_HIST_SYSTEM_EVENT NATURAL
                               JOIN   dba_hist_snapshot NATURAL
                               JOIN   DBA_HIST_DATABASE_INSTANCE
                               WHERE  end_interval_time>systimestamp-NUMTOYMINTERVAL(1,'month')
                               AND    (:V2 IS NULL AND instance_number = userenv('instance') OR lower(nvl(:V2, '0')) IN ('0', 'a') OR instance_number = :V2)
                               AND    (&filter) AND (&ADDITIONAL_FILTER) ) a)
                 GROUP  BY STARTUP_TIME, event, snap_id) a
        WHERE  (count > 0 and total_time>0)
        ORDER  BY 1]],
    _pivot=true,
    --legend="follow",
    labelsSeparateLines=true,
    labelsKMB=true,
    height=400,
}