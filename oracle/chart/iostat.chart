/*[[
    Generate the graph chart based on DBA_HIST_IOSTAT_DETAIL. Usage: @@NAME ["<function/file type name>"] [inst_id] [yymmddhh24mi] [yymmddhh24mi] [-f"<filter>"]
    Impacted by settings: starttime,endtime,instance
    inst_id: Default as all instances, other options are:
                0         - Separate all instances
                a         - Group all instances
                <inst_id> - Only the specific instance
    -f       : User-defined filter. For example, -f"stat_name like '%time%'"
    -c       : Group by FILETYPE_NAME
    --[[
        @VERSION: 11.2={}
        &V2     : default={&INSTANCE}
        &V3     : default={&STARTTIME}
        &V4     : default={&ENDTIME}
        &GRP    : default={FUNCTION_NAME}, c={FILETYPE_NAME}, f={FILETYPE_NAME}
        &filter : default={1=1},f={}
    --]]
]]*/
{
    title="System IO State Chart",
    _sql=[[
        SELECT to_char(MAX(end_time), 'YYYY-MM-DD HH24:MI') TIME, event,
               Round(SUM(WAIT_TIME/slot_size*1e-3),2) "Wait Seconds per Minute",
               Round(SUM(RMB/Slot_size*1024*1024),2)  "Read Bytes per Minute",
               Round(SUM(WMB/Slot_size*1024*1024),2)  "Write Bytes per Minute",
               Round(SUM(RREQ/Slot_size*1024*1024),2) "Read Requests per Minute",
               Round(SUM(WREQ/Slot_size*1024*1024),2) "Write Requests per Minute",
               Round(sum(RMB)/sum(WAIT_TIME)*1e3*1024*1024,2) "AVG Read Speed(Bytes/Sec)",
               Round(sum(WMB)/sum(WAIT_TIME)*1e3*1024*1024,2) "AVG Write Speed(Bytes/Sec)"
        FROM  (SELECT /*+merge*/
                       A.*,
                       GROUP_BY || decode(nvl(lower(:V2), 'a'), 'a', NULL, ' #' || inst_id) event
               FROM   (SELECT /*+merge no_expand ordered_predicates*/
                              instance_number inst_id,
                              end_interval_time+0 end_time,
                              CASE WHEN :V1 IS NOT NULL then FILETYPE_NAME ELSE &GRP END GROUP_BY,
                              ((end_interval_time+0)-(begin_interval_time+0))*1440 Slot_size,
                              SMALL_READ_MEGABYTES + LARGE_READ_MEGABYTES - LAG(SMALL_READ_MEGABYTES + LARGE_READ_MEGABYTES) OVER(PARTITION BY instance_number, FUNCTION_ID, FILETYPE_ID, startup_time ORDER BY snap_id) rmb,
                              SMALL_WRITE_MEGABYTES + LARGE_WRITE_MEGABYTES - LAG(SMALL_WRITE_MEGABYTES + LARGE_WRITE_MEGABYTES) OVER(PARTITION BY instance_number, FUNCTION_ID, FILETYPE_ID, startup_time ORDER BY snap_id) wmb,
                              SMALL_READ_REQS+LARGE_READ_REQS-LAG(SMALL_READ_REQS+LARGE_READ_REQS) OVER(PARTITION BY instance_number, FUNCTION_ID, FILETYPE_ID, startup_time ORDER BY snap_id) RREQ,
                              SMALL_WRITE_REQS+LARGE_WRITE_REQS-LAG(SMALL_WRITE_REQS+LARGE_WRITE_REQS) OVER(PARTITION BY instance_number, FUNCTION_ID, FILETYPE_ID, startup_time ORDER BY snap_id) WREQ,
                              WAIT_TIME-LAG(WAIT_TIME) OVER(PARTITION BY instance_number, FUNCTION_ID, FILETYPE_ID, startup_time ORDER BY snap_id) WAIT_TIME
                       FROM   DBA_HIST_IOSTAT_DETAIL 
                       NATURAL JOIN dba_hist_snapshot
                       WHERE  end_interval_time+0 between NVL(to_date(:V3,'yymmddhh24miss')-3/144,sysdate-7) AND NVL(to_date(:V4,'yymmddhh24miss'),sysdate)
                       AND    (:V2 IS NULL OR lower(nvl(:V2, '0')) IN ('0', 'a') OR instance_number = :V2)
                       AND    (&filter)
                       AND    (:V1 is null or upper(FUNCTION_NAME)=upper(:V1) or upper(FILETYPE_NAME)=upper(:V1))) a
               where nvl(WAIT_TIME,0)>0)
         GROUP  BY event, end_time]],
    _pivot=true,
    labelsSeparateLines=true,
    labelsKMG2=true,
    height=400,
}