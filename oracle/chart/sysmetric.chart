/*[[Show chart for GV$SYSMETRIC_HISTORY/DBA_HIST_SYSMETRIC_SUMMARY. Usage: sysmetric <metric_name|metric_group_name> [-d] [inst_id] [yymmddhh24mi] [yymmddhh24mi]
   -d:  based on DBA_HIST_SYSMETRIC_SUMMARY, otherwise based on GV$SYSMETRIC_HISTORY
    --[[
      @BASE : 10.2={}
      &DICT : V={V}, D={D}
      &TITLE: V={GV$SYSMETRIC_HISTORY}, D={DBA_HIST_SYSMETRIC_SUMMARY}
    ]]--
]]*/

   {
       _attrs=[[select 'Sysmetric History(&TITLE)' title from dual]],
       _sql=[[
        SELECT SAMPLE_TIME,metric_name,metric_value
        FROM (
            SELECT sample_time, 
                   REPLACE(REPLACE(METRIC_NAME, ' Bytes', ' MB'), ' Per ', ' / ') metric_name,
                   VALUE / CASE
                       WHEN LOWER(' ' || metric_unit || ' ') LIKE '% bytes %' THEN
                        1024 * 1024
                       ELSE
                        1
                   END metric_value,
                   DENSE_RANK() OVER(ORDER BY STD DESC) RND
            FROM   (SELECT /*+merge no_expand*/
                            A.end_time sample_time, A.METRIC_NAME, A.metric_unit, SUM(VALUE) VALUE,STDDEV(SUM(VALUE)) OVER(PARTITION BY A.METRIC_NAME) std
                     FROM   (SELECT inst_id, end_time, METRIC_NAME, metric_unit,group_id, VALUE
                              FROM   GV$SYSMETRIC_HISTORY
                              WHERE  'V' = UPPER(:DICT)
                              UNION ALL
                              SELECT INSTANCE_NUMBER, END_TIME, METRIC_NAME, metric_unit,group_id,AVERAGE
                              FROM   DBA_HIST_SYSMETRIC_SUMMARY
                              WHERE  'D' = UPPER(:DICT)) A JOIN (SELECT group_id,group_name FROM V$METRICNAME) b USING(group_id)
                     WHERE  (:V2 IS NULL OR INST_ID = :DICT)
                     AND    (:V1 IS NULL OR UPPER(METRIC_NAME) LIKE UPPER('%&V1%') OR upper(B.GROUP_NAME)=upper(:V1)) /* changed from metric_id to metric_name as name is more intuitive*/
                     AND    end_time between nvl(to_date(nvl(:V3,:STARTTIME),'yymmddhh24mi'),sysdate-7) and nvl(to_date(nvl(:V4,:ENDTIME),'yymmddhh24mi'),sysdate)
                     GROUP  BY a.end_time, A.METRIC_NAME, a.metric_unit
                     ORDER BY STD DESC)
        ) WHERE RND<=15
        ]],
       _pivot=true,
       rollPeriod=1,
       labelsKMB=true,
       ylabel='Value',
       fillGraph=true,
       stackedGraph=false,
       labelsSeparateLines=true,
   }