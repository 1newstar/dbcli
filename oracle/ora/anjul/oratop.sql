-- db info

/* oratop s0a*/
PROMPT DB INFO
SELECT /*+ OPT_PARAM('_optimizer_adaptive_plans','false') */  /*+ NO_MONITOR */  * FROM   (select sys_context('USERENV','DB_UNIQUE_NAME') dbnm   from dual   ),   (SELECT NAME    from v$active_services      where name = (SELECT SERVICE_NAME           from v$session where           sid=(select sys_context('USERENV','SID') from dual))   UNION ALL   SELECT 'SYS$USERS'   FROM DUAL   WHERE NOT EXISTS (      select NAME from       v$active_services      where name = (SELECT SERVICE_NAME             from v$session where             sid=(select sys_context('USERENV','SID') from dual)))  ),   (select to_number(SUBSTR(banner,17,2))         vers,    SUBSTR(banner,17,3)                           cver   from v$version where substr(banner,1,3) = 'Ora'  ),   (select SUBSTR(UPPER(VALUE),1,5) typd  from v$parameter where NAME='instance_type'  ),  (select DECODE(VALUE,'BASIC',1,0) stlv  from v$parameter where NAME='statistics_level'  ),  (select count(*) dasm from v$asm_diskgroup  );

-- memory configuration
/* oratop s1 */
PROMPT CONFIGURATION
SELECT /*+ OPT_PARAM('_optimizer_adaptive_plans','false') */  /*+ NO_MONITOR */  * FROM   (SELECT /*+ OPT_PARAM('_optimizer_adaptive_plans','false') */    sum(value) taas    from gv$sysmetric    where metric_name = 'Database Time Per Sec' and group_id=3   ),   (SELECT /*+ OPT_PARAM('_optimizer_adaptive_plans','false') */    count(*) sess, count(distinct username) duser    from gv$session    where          type <> 'BACKGROUND'      and username is not null      and SCHEMA# != 0   ),   (SELECT /*+ OPT_PARAM('_optimizer_adaptive_plans','false') */    to_char(max(end_time),'hh24:mi:ss') dbts,    sum(value) spga    from gv$sysmetric    where metric_name ='Total PGA Allocated' and group_id=3   ),   (select (sysdate-startup_time) * 86400 uptm    from v$instance   ),   (SELECT /*+ OPT_PARAM('_optimizer_adaptive_plans','false') */    SUM(VALUE) scpu, count(distinct inst_id) inst    from gv$osstat where stat_name='NUM_CPUS'   ),   (SELECT /*+ OPT_PARAM('_optimizer_adaptive_plans','false') */    SUM(VALUE) ssga    from gv$sga   ),   (SELECT /*+ OPT_PARAM('_optimizer_adaptive_plans','false') */    SUM(VALUE) prob    from GV$DIAG_INFO where NAME='Active Problem Count'   ),   (select sum(fra) reco    from       (select SPACE_USED/GREATEST(SPACE_LIMIT,1)*100 fra        from V$RECOVERY_FILE_DEST        union        select 0 fra from dual)   ),   (select       initcap(substr(sys_context('USERENV','DATABASE_ROLE'),-7,16)) dbro    from dual   ),  (select sum(ar) dgar   from (     SELECT /*+ OPT_PARAM('_optimizer_adaptive_plans','false') */     sofar ar from gv$recovery_progress      where type='Media Recovery' and ITEM='Active Apply Rate'      and rownum=1     union     select 0 ar from dual )  ),  (SELECT /*+ OPT_PARAM('_optimizer_adaptive_plans','false') */   max(VALUE) pgag   from gv$pgastat where name='aggregate PGA target parameter' );

-- load details
/* oratop s2 */
PROMPT LOAD DETAILS
SELECT /*+ OPT_PARAM('_optimizer_adaptive_plans','false') */  /*+ NO_MONITOR */         inid, hcpu, sgfr, utps, ucps, saas, mbps,         ssrt, iorl, load, upga, aspq, dbcp, dbwa, iops, asct, isct,         cpas, ioas, waas, dcpu, ncpu, logr, phyr, phyw, temp, dbtm  FROM   (SELECT /*+ OPT_PARAM('_optimizer_adaptive_plans','false') */    inst_id inid,    sum(decode(metric_name, 'CPU Usage Per Sec' , value,0)) dcpu,    sum(decode(metric_name, 'Host CPU Utilization (%)' , value,0)) hcpu,    sum(decode(metric_name, 'I/O Megabytes per Second' , value,0)) mbps,    sum(decode(metric_name, 'SQL Service Response Time' , value,0)) ssrt,    sum(decode(metric_name,        'Average Synchronous Single-Block Read Latency', value,0)) iorl,    sum(decode(metric_name, 'Current OS Load' , value,0)) load,    sum(decode(metric_name, 'Active Parallel Sessions' , value,0)) aspq,    sum(decode(metric_name, 'Database CPU Time Ratio' , value,0)) dbcp,    sum(decode(metric_name, 'Database Wait Time Ratio' , value,0)) dbwa,    sum(decode(metric_name, 'I/O Requests per Second' , value,0)) iops    from gv$sysmetric    where metric_name in (    'CPU Usage Per Sec',     'Host CPU Utilization (%)',     'I/O Megabytes per Second',     'SQL Service Response Time',     'Average Synchronous Single-Block Read Latency',     'Current OS Load',     'Active Parallel Sessions',     'Database CPU Time Ratio',     'Database Wait Time Ratio',     'I/O Requests per Second' )    and group_id=2 group by inst_id   ),   (SELECT /*+ OPT_PARAM('_optimizer_adaptive_plans','false') */    inst_id id1,   sum(decode(metric_name, 'Shared Pool Free %' , value,0)) sgfr,    sum(decode(metric_name, 'User Transaction Per Sec' , value,0)) utps,    sum(decode(metric_name, 'User Calls Per Sec' , value,0)) ucps,    sum(decode(metric_name, 'Average Active Sessions' , value,0)) saas,    sum(decode(metric_name, 'Total PGA Allocated' , value,0)) upga,    sum(decode(metric_name, 'Logical Reads Per Sec' , value,0)) logr,    sum(decode(metric_name, 'Physical Reads Per Sec' , value,0)) phyr,    sum(decode(metric_name, 'Physical Writes Per Sec' , value,0)) phyw,    sum(decode(metric_name, 'Temp Space Used' , value,0)) temp,    sum(decode(metric_name, 'Database Time Per Sec' , value,0)) dbtm    from gv$sysmetric     where metric_name in (     'Shared Pool Free %',     'User Transaction Per Sec',     'User Calls Per Sec',     'Logical Reads Per Sec',     'Physical Reads Per Sec',     'Physical Writes Per Sec',     'Temp Space Used',     'Database Time Per Sec',     'Average Active Sessions',     'Total PGA Allocated')    and group_id=3 group by inst_id   ),   ( SELECT id2,            sum(asct) asct,            sum(isct) isct,            sum(cpas) cpas,            sum(ioas) ioas,            sum(waas) waas     FROM     (SELECT /*+ OPT_PARAM('_optimizer_adaptive_plans','false') */      inst_id id2,      sum(DECODE(status,'ACTIVE',1,0)) asct,      count(*) isct,      sum(DECODE(status,'ACTIVE', decode(WAIT_TIME,0,0,1),0)) cpas,      sum(DECODE(status,'ACTIVE',                 decode(wait_class,'User I/O',1,0),0)) ioas,      sum(DECODE(status,'ACTIVE', decode(WAIT_TIME,0,                 decode(wait_class, 'User I/O',0, 1),0),0)) waas      from gv$session      where            type <> 'BACKGROUND'        and username is not null        and SCHEMA# != 0      group by inst_id     UNION ALL     SELECT /*+ OPT_PARAM('_optimizer_adaptive_plans','false') */     inst_id id2, 0 asct, 0 isct, 0 cpas, 0 ioas, 0 waas     from gv$instance     )     group by id2   ),   (SELECT /*+ OPT_PARAM('_optimizer_adaptive_plans','false') */    inst_id id3, TO_NUMBER(VALUE) ncpu    from gv$osstat    where stat_name = 'NUM_CPUS'   )  WHERE id1=inid and id2=inid and id3=inid  and ROWNUM <= 5 ORDER BY dbtm desc;

-- event commulative
/* oratop s3a */
PROMPT EVENT COMMULATIVE
SELECT /*+ OPT_PARAM('_optimizer_adaptive_plans','false') */  /*+ NO_MONITOR */         event, totwa, twsec, avgms,         ROUND(RATIO_TO_REPORT(twsec) OVER () * 100) pctwa,         wclas, evtid  FROM        (SELECT /*+ OPT_PARAM('_optimizer_adaptive_plans','false') */                EVENT,                SUM(TOTAL_WAITS)                     totwa,                SUM(TIME_WAITED)/100                 twsec,                AVG(AVERAGE_WAIT)*10                 avgms,                WAIT_CLASS                           wclas,                EVENT_ID                             evtid          FROM  GV$SYSTEM_EVENT          WHERE  WAIT_CLASS <> 'Idle'         GROUP  BY EVENT, WAIT_CLASS, EVENT_ID         HAVING  SUM(TOTAL_WAITS) > 0         UNION        SELECT /*+ OPT_PARAM('_optimizer_adaptive_plans','false') */               'DB CPU'       event,                0              totwa,                sum(VALUE)/100 twsec,                0              avgms,                NULL           wclas,                19             evtid          FROM  GV$SYSSTAT           WHERE NAME like '%CPU used by this session%'  ORDER BY twsec desc)  WHERE ROWNUM <6;

-- event in realtime
/* oratop s3b */
PROMPT EVENT REAL-TIME
SELECT /*+ OPT_PARAM('_optimizer_adaptive_plans','false') */  /*+ NO_MONITOR */         event, totwa, twsec, avgms,         ROUND(RATIO_TO_REPORT(twsec) OVER () * 100) pctwa,         wclas, evtid  FROM (         SELECT /*+ OPT_PARAM('_optimizer_adaptive_plans','false') */                SW.EVENT,                 SUM(SE.TOTAL_WAITS)                  totwa,                SUM(SE.TIME_WAITED)/100              twsec,               SUM(SE.TIME_WAITED)/                  (GREATEST(SUM(SE.TOTAL_WAITS),1)*10) avgms,                 SW.WAIT_CLASS                        wclas,                SW.EVENT#                            evtid          FROM GV$SESSION_WAIT_CLASS SE               JOIN GV$SESSION SW ON SE.INST_ID = SW.INST_ID               AND SE.SID = SW.SID         WHERE SE.wait_class != 'Idle' AND               SW.wait_class != 'Idle'         GROUP BY SW.EVENT, SW.WAIT_CLASS, SW.EVENT#         HAVING SUM(SE.TOTAL_WAITS) > 0         UNION        SELECT /*+ OPT_PARAM('_optimizer_adaptive_plans','false') */               'DB CPU'          event,               0                 totwa,               SUM(VALUE)/100    twsec,               0                 avgms,               NULL              wclas,               19                evtid         FROM              GV$SESSTAT se              JOIN GV$SESSION s2 ON se.INST_ID = s2.INST_ID              AND se.SID = s2.SID         WHERE se.STATISTIC# =19          AND se.value > 0  AND s2.wait_class != 'Idle' ORDER BY twsec desc)  WHERE ROWNUM <6;

-- session details (file block)
/* oratop s4a */
PROMPT SESSION DETAILS FILE/BLOCK
SELECT /*+ OPT_PARAM('_optimizer_adaptive_plans','false') */  /*+ NO_MONITOR */       s.WAIT_TIME                                     trm4,       s.inst_id                                        id4,       s.sid                                           sid4,       p.spid                                          pid4,       decode(p.BACKGROUND,1,'B/G',        decode(s.username,NULL,'F/G',s.username))       usr4,       decode(p.PNAME,NULL,s.program,p.PNAME)          prg4,       s.module                                        modl,       s.action                                        actn,         p.PGA_USED_MEM                                pgau,         p.PGA_ALLOC_MEM                               pgac,         p.PGA_FREEABLE_MEM                            pgaf,         x.pgax                                        pgax,         c.COMMAND_NAME                                opn,         DECODE(s.PLSQL_SUBPROGRAM_ID, NULL,                                s.SQL_ID, NULL)                        sqid,         DECODE(s.FINAL_BLOCKING_SESSION_STATUS,'VALID',            to_char(s.FINAL_BLOCKING_INSTANCE)||':'||            to_char(s.FINAL_BLOCKING_SESSION), NULL)   bses,         s.status                                       st4,       decode(s.state,'WAITING',                                        decode(s.wait_class, 'User I/O', 'I/O',                     s.state),'CPU')                             su4,       CASE WHEN s.STATE <> 'WAITING' and                                    s.TIME_SINCE_LAST_WAIT_MICRO < 1000000                 THEN 'cpu runqueue' ELSE event END          ev4,       s.wait_class                                     wc4,       s.WAIT_TIME_MICRO                                siw,       s.last_call_et                                  lcet,       s.server                                        sded,       s.SERVICE_NAME                                  svcn,       DECODE(n.name, null, null,'*'||n.name)          lp2n,       DECODE(s.ROW_WAIT_OBJ#,-1, NULL,                            substr(to_char(s.ROW_WAIT_FILE#)||':'||                     to_char(s.ROW_WAIT_BLOCK#),1,24))               fbon   from GV$SESSION s       JOIN gv$process p on (p.inst_id = s.inst_id                       and p.addr  = s.paddr)       LEFT OUTER JOIN v$sqlcommand c on (s.command = c.COMMAND_TYPE)       LEFT OUTER JOIN v$LATCHNAME n on (s.p2 = n.latch#)           ,(SELECT /*+ OPT_PARAM('_optimizer_adaptive_plans','false') */         inst_id, MAX(PGA_MAX_MEM) pgax         from GV$PROCESS group by inst_id) x  where       x.inst_id=s.inst_id      and s.wait_class <> 'Idle'  ORDER BY siw desc, lcet desc;

-- session details (detail)
/* oratop s4b */
PROMPT SESSION DETAILS
WITH SQA as (   SELECT /*+ OPT_PARAM('_optimizer_adaptive_plans','false') */    /*+ NO_MONITOR */          INST_ID,           PARSING_SCHEMA_NAME,            MODULE,            ACTION,           SQL_ID,           substr(SQL_TEXT,1,64) sql_text,           EXECUTIONS,           BUFFER_GETS,           DISK_READS,           ELAPSED_TIME,           CPU_TIME,           USER_IO_WAIT_TIME,           (CONCURRENCY_WAIT_TIME + CLUSTER_WAIT_TIME +            APPLICATION_WAIT_TIME + PLSQL_EXEC_TIME +            JAVA_EXEC_TIME) wait,           ROWS_PROCESSED,           PX_SERVERS_EXECUTIONS,           USERS_EXECUTING,           (s.buffer_gets/GREATEST(s.disk_reads+s.buffer_gets,1))*100 bhr         FROM GV$SQLAREA s         WHERE EXECUTIONS > 0          AND USERS_EXECUTING > 0          AND PARSING_USER_ID != 0          AND COMMAND_TYPE NOT IN (47,170)          AND SQL_TEXT not like '%oratop%'   )   SELECT /*+ OPT_PARAM('_optimizer_adaptive_plans','false') */    * FROM (   SELECT /*+ OPT_PARAM('_optimizer_adaptive_plans','false') */           INST_ID,           PARSING_SCHEMA_NAME,            MODULE,            ACTION,           SQL_ID,            SQL_TEXT,           EXECUTIONS,           BUFFER_GETS,           DISK_READS,           ELAPSED_TIME,           CPU_TIME,           USER_IO_WAIT_TIME,           wait,           ROWS_PROCESSED,           PX_SERVERS_EXECUTIONS,           USERS_EXECUTING,           bhr         FROM SQA         WHERE PX_SERVERS_EXECUTIONS =0   UNION   SELECT /*+ OPT_PARAM('_optimizer_adaptive_plans','false') */           x.INST_ID,           x.PARSING_SCHEMA_NAME,            x.MODULE,            x.ACTION,           x.SQL_ID,            x.SQL_TEXT,           x.EXECUTIONS,           x.BUFFER_GETS,           x.DISK_READS,           x.ELAPSED_TIME,           x.CPU_TIME,           x.USER_IO_WAIT_TIME,           x.wait,           x.ROWS_PROCESSED,           x.PX_SERVERS_EXECUTIONS,           x.USERS_EXECUTING,           x.bhr    FROM       (SELECT /*+ OPT_PARAM('_optimizer_adaptive_plans','false') */           INST_ID,           PARSING_SCHEMA_NAME,            MODULE,            ACTION,           SQL_ID,            SQL_TEXT,           EXECUTIONS,           BUFFER_GETS,           DISK_READS,           ELAPSED_TIME,           CPU_TIME,           USER_IO_WAIT_TIME,           wait,           ROWS_PROCESSED,           PX_SERVERS_EXECUTIONS,           USERS_EXECUTING,           bhr         FROM SQA          WHERE PX_SERVERS_EXECUTIONS >0 ) x,      (SELECT /*+ OPT_PARAM('_optimizer_adaptive_plans','false') */        SQL_ID,         MAX(USERS_EXECUTING) USERS_EXECUTING        FROM SQA         WHERE PX_SERVERS_EXECUTIONS >0       group by          SQL_ID ) y        where x.USERS_EXECUTING=y.USERS_EXECUTING         and x.sql_id=y.sql_id    )    ORDER BY ELAPSED_TIME/greatest(decode(PX_SERVERS_EXECUTIONS,0,             EXECUTIONS, PX_SERVERS_EXECUTIONS),1) desc;


-- sql plan
/* oratop s05*/
--PROMPT SQL PLAN
--WITH VPLAN as (        SELECT  /*+ OPT_PARAM('_optimizer_adaptive_plans','false') */  /*+ NO_MONITOR */                s1.INST_ID,                s1.SQL_ID,                p1.PLAN_HASH_VALUE,                upper(rtrim(s1.sql_text)) text,                MAX(p1.child_number) child_number          from  GV$SQL s1          JOIN  GV$SQL_PLAN p1            on  s1.inst_id=p1.inst_id           and  s1.sql_id=p1.sql_id           and  s1.child_number=p1.child_number           and  s1.ADDRESS=p1.ADDRESS           and  s1.hash_value=p1.hash_value           and  s1.PLAN_HASH_VALUE=p1.PLAN_HASH_VALUE         where  p1.SQL_ID= :sqlid           and rownum = 1      group by  s1.INST_ID, s1.SQL_ID, p1.PLAN_HASH_VALUE, s1.sql_text      order by child_number desc   )   SELECT /*+ OPT_PARAM('_optimizer_adaptive_plans','false') */      to_char(p.PLAN_HASH_VALUE),        p.ID,         substr(lpad(' ',p.depth) || p.operation ||         decode(p.options,NULL,'',' '|| p.options),1,80),        substr(p.object_name,1,14),        p.child_number,       vp.text,       p.cardinality,       p.cost,       (CASE when p.object_type like 'TABLE%' then t.STALE_STATS             when p.object_type like 'INDEX%' then i.STALE_STATS             else NULL end)       from GV$SQL_PLAN p      JOIN VPLAN vp        on vp.inst_id=p.inst_id       and vp.PLAN_HASH_VALUE=p.PLAN_HASH_VALUE       and vp.sql_id=p.sql_id      LEFT OUTER JOIN dba_tab_statistics t on               t.table_name = p.object_name               and t.owner= p.object_owner               and t.partition_name is null               and UPPER(p.object_type) not like '%TEMP%'       LEFT OUTER JOIN dba_ind_statistics i on               i.index_name = p.object_name               and i.owner= p.object_owner               and i.partition_name is null      WHERE  p.child_number = vp.child_number        AND  p.sql_id = vp.sql_id         AND  p.inst_id = vp.inst_id        AND  p.child_number = vp.child_number         AND  p.PLAN_HASH_VALUE = vp.PLAN_HASH_VALUE    ORDER BY  p.ID;

-- tablespace details
--/* oratop s06*/
-- PROMPT TABLESPACE DETAILS
--SELECT  /*+ OPT_PARAM('_optimizer_adaptive_plans','false') */  /*+ NO_MONITOR */         d.tablespace_name                          tbsn,         DECODE(d.contents,'UNDO', NVL(u.bytes, 0),           NVL(a.bytes - NVL(f.bytes, 0), 0))       tbsu,         d.status                                   tbss,          d.contents                                 tbsc,         d.extent_management                        tbse,          d.segment_space_management                 tbsm,         d.bigfile                                  tbsf,         d.LOGGING                                  tbsl,         d.RETENTION                                tbsr,         d.ENCRYPTED                                tbsy,         d.BLOCK_SIZE                               tbsb,         NVL(a.count, 1)                            tbsi,          a.maxb                                     tbsz    FROM  sys.dba_tablespaces d,         (   SELECT tablespace_name,                     SUM(bytes) bytes,                     SUM(maxbytes) maxb,                     COUNT(file_id) count                from dba_data_files            GROUP BY tablespace_name) a,          (   select tablespace_name,                    sum(bytes) bytes                from dba_free_space            group by tablespace_name) f,         (   SELECT tablespace_name,                     SUM(bytes) bytes                FROM dba_undo_extents               WHERE                    status IN ('ACTIVE','UNEXPIRED')            GROUP BY tablespace_name) u               WHERE                    d.tablespace_name = a.tablespace_name(+)                 AND d.tablespace_name = f.tablespace_name(+)                 AND d.tablespace_name = u.tablespace_name(+)                 AND NOT (d.extent_management = 'LOCAL'                     and d.contents = 'TEMPORARY')  UNION ALL  SELECT d.tablespace_name                          tbsn,         NVL(t.bytes, 0)                            tbsu,          d.status                                   tbss,          d.contents                                 tbsc,         d.extent_management                        tbse,          d.segment_space_management                 tbsm,         d.bigfile                                  tbsf,         d.LOGGING                                  tbsl,         d.RETENTION                                tbsr,         d.ENCRYPTED                                tbsy,         d.BLOCK_SIZE                               tbsb,         NVL(a.count, 1)                            tbsi,          a.maxb                                     tbsz     FROM sys.dba_tablespaces d,         (  select tablespace_name,                   sum(bytes) bytes,                   SUM(maxbytes) maxb,                   count(file_id) count              from dba_temp_files          group by tablespace_name) a,    (  select  /*+ OPT_PARAM('_optimizer_adaptive_plans','false') */                  ss.tablespace_name ,                  sum((ss.used_blocks*ts.blocksize)) bytes              from gv$sort_segment ss,                  sys.ts$ ts             where ss.tablespace_name = ts.name          group by ss.tablespace_name) t   WHERE d.tablespace_name = a.tablespace_name(+)     AND d.tablespace_name = t.tablespace_name(+)     AND d.extent_management ='LOCAL'     AND d.contents = 'TEMPORARY'   ORDER BY 1;
