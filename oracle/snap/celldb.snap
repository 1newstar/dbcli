/*[[
  Generate delta values based on Exadata cell stats. Usage: @@NAME [options]} 
  --[[
        &sec1: total={off}, s={on}
        &cell: default={}, d={,cell}
        &cellname: default={(select extractvalue(xmltype(a.confval),'/cli-output/context/@cell') from v$cell_config a where a.CELLNAME=b.CELL_NAME and rownum<2) cell}
  --]]
]]*/
{
    sql={
    [[/*grid={topic="ASM Stats", max_rows=10,order_by='-gid,-bytes',fixed_title=true}*/
      SELECT   grouping_id(g.name) gid, 
               nvl(g.name,'--TOTAL--') diskgroup &cell, 
               count(DISTINCT ds.inst_id) "INSTANCES",
               count(DISTINCT ds.disk_number) "DISKS",
               count(DISTINCT regexp_replace(ds.path, '.*/', '')) paths,
               SUM(ds.TOTAL_MB)*1024*1024 TOTAL_SIZE,
               SUM(ds.FREE_MB)*1024*1024 FREE_SIZE,
               '|' "|",
               SUM(ds.bytes_read + ds.bytes_written) bytes,
               SUM(ds.HOT_BYTES_READ + ds.HOT_BYTES_written) hot_bytes,
               SUM(ds.bytes_read) read,
               SUM(ds.bytes_written) write,
               '|' "|",
               SUM(ds.reads + ds.writes) total_io,
               SUM(ds.reads) READS,
               SUM(ds.writes) writes,
               SUM(ds.READ_ERRS + ds.write_ERRS)*1e3 io_errs,
               SUM(ds.read_time + ds.write_time)*1e3 rw_ms,
               SUM(ds.read_time)*1e3 read_ms,
               SUM(ds.write_time)*1e3 write_ms
        FROM   gv$asm_disk_stat ds, gv$asm_diskgroup_stat g
        WHERE  ds.mount_status = 'CACHED'
        AND    g.inst_id = ds.inst_id
        AND    g.group_number = ds.group_number
        GROUP BY rollup((g.name &cell))]],
    '-',[[/*grid={topic="Cell Throughput",fixed_title=true,order_by='cell'}*/
    SELECT nvl(CELL,'--TOTAL--') cell,SUM(cellsrv_input) cellsrv_input,SUM(cellsrv_output) cellsrv_output,SUM(cellsrv_passthru) cellsrv_passthru,
           SUM(ofl_input) ofl_input,SUM(ofl_output) ofl_output,SUM(ofl_passthru) ofl_passthru,SUM(cpu_passthru) cpu_passthru,SUM(storage_idx_saved) storage_idx_saved
    FROM ( SELECT (SELECT extractvalue(xmltype(c.confval), '/cli-output/context/@cell')
                    FROM   v$cell_config c
                    WHERE  c.CELLNAME = a.CELL_NAME
                    AND    rownum < 2) cell,
                    b.*
            FROM   v$cell_state a,
                   xmltable('/' passing xmltype(a.statistics_value) columns --
                            cellsrv_input NUMBER path '//stat[@name="cellsrv_total_input_bytes"]',--
                            cellsrv_output NUMBER path '//stat[@name="cellsrv_total_output_bytes"]',--
                            cellsrv_passthru NUMBER path '//stat[@name="cellsrv_passthru_output_bytes"]',--
                            ofl_input NUMBER path '//stat[@name="celloflsrv_total_input_bytes"]',--
                            ofl_output NUMBER path '//stat[@name="celloflsrv_total_output_bytes"]',--
                            ofl_passthru NUMBER path '//stat[@name="celloflsrv_passthru_output_bytes"]',--
                            cpu_passthru NUMBER path '//stat[@name="cpu_passthru_output_bytes"]',--
                            storage_idx_saved NUMBER path '//stat[@name="storage_idx_saved_bytes"]'
                            ) b
            WHERE  statistics_type = 'OFLGRPDES')
    GROUP BY rollup(cell)]],
    '-',{[[/*grid={topic="Cell Global Stats",height=0}*/
          SELECT substr(METRIC_NAME,1,40) METRIC_NAME &cell, sum(METRIC_VALUE) value,METRIC_TYPE unit
          FROM (select &cellname,b.* from V$CELL_GLOBAL b)
          WHERE METRIC_VALUE>0 
          GROUP BY METRIC_NAME &cell,METRIC_TYPE]],
      '|',{[[/*grid={topic="Cell DB",order_by='-gid,-bytes',max_rows=10,fixed_title=true}*/
        SELECT  grouping_id(src) gid ,
                nvl(src,'--TOTAL--') src &cell,
                count(distinct cell) cells,
                SUM(DECODE(metric_name, 'Per Db Bytes of IO', v, 'Per Db Bytes of IO for Flash', v)) bytes,
                SUM(DECODE(metric_name, 'Per Db Bytes of IO for Flash', v)) f_bytes,
                0 "Flash(%)",
                SUM(DECODE(metric_name, 'Per Db Number of IOs', v, 'Per Db Number of IOs for Flash', v)) ios,
                SUM(DECODE(metric_name, 'Per Db Number of IOs for Flash', v)) f_ios,
                SUM(DECODE(metric_name, 'Per Db Number of large IOs', v, 'Per Db Number of large IOs for Flash', v)) lios,
                SUM(DECODE(metric_name, 'Per Db Number of large IOs for Flash', v)) f_lios,
                SUM(case when metric_name like '% IO % time%' then v end)*1e-3 avg_ms,
                SUM(case when metric_name like '% IO % time' then v end)*1e-3 hd_ms,
                SUM(case when metric_name like '% IO % time % Flash' then v end)*1e-3 fd_ms
            FROM   (SELECT &cellname,
                           src_Dbname src, COUNT(1) cells, metric_name, SUM(metric_value) v, metric_type
                    FROM   V$CELL_DB b
                    GROUP  BY cell_name,src_Dbname, metric_name, metric_type
                    ORDER  BY 1, 3)
            GROUP  BY grouping sets((src &cell),()) ]],
        '-',{[[/*grid={topic="Cell Reason", max_rows=20}*/
            SELECT nvl(reason_name,'--TOTAL--') reason_name &cell, SUM(metric_value) metric_value
            FROM   (SELECT &cellname,
                           reason_name,
                           SUM(metric_value) metric_value
                    FROM   V$CELL_IOREASON b
                    WHERE  metric_type = 'bytes'
                    AND    Metric_value > 0
                    GROUP  BY CELL_NAME, reason_name)
            GROUP  BY reason_name &cell]],
            '+',[[/*grid={topic="Predicate IO", max_rows=20}*/
            SELECT NAME &cell,SUM(VALUE) VALUE
            FROM   (SELECT &cellname,c.*
                    FROM   v$cell_state b,
                           xmltable('/predio_stats/stats[@type=("predicateio","storidx_global_stats")]/stat[. > 0]' 
                                    passing xmltype(b.statistics_value) columns --
                                    NAME VARCHAR2(41) path '@name',
                                    VALUE NUMBER path '.') c
                    WHERE  statistics_type = 'PREDIO')
            WHERE lower(cell) like lower('%'||:V1||'%') AND VALUE>0
            GROUP BY NAME &cell]]}},
    }},
    delta_by="cellsrv_input,cellsrv_output,cellsrv_passthru,ofl_input,ofl_output,ofl_passthru,cpu_passthru,storage_idx_saved,total_io,io_errs,writes,READS,hot_bytes,bytes,read,write,fd_bytes,fd_read,fd_write,timeouts,rw_ms,read_ms,write_ms,METRIC_VALUE,value,bytes,f_bytes,ios,f_ios,lios,f_lios,avg_ms,hd_ms,fd_ms",
    calc_rules={["Flash(%)"]='[f_bytes]*100/[bytes]',
                 avg_ms='[avg_ms]/[ios]',
                 hd_ms='[hd_ms]/([ios]-[f_ios])',
                 fd_ms='[fd_ms]/[f_ios]',
                 rw_ms='[rw_ms]/[total_io]',
                 read_ms='[read_ms]/([reads])',
                 write_ms='[write_ms]/[writes]'},
    column_formatter={KMG='cellsrv_input,cellsrv_output,cellsrv_passthru,ofl_input,ofl_output,ofl_passthru,cpu_passthru,storage_idx_saved,OS_SIZE,TOTAL_SIZE,FREE_SIZE,bytes,hot_bytes,read,write,bytes,fd_bytes,fd_read,fd_write,f_bytes,metric_value',
                      TMB='ios,f_ios,lios,f_lios,total_io,writes,READS,io_errs',
                      smhd2='timeouts',
                     ['#,##0']='value'},
    group_by="diskgroup,cell,src,reason_name,METRIC_NAME,NAME"
}
