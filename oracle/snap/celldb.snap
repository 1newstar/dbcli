/*[[
  Generate delta values based on Exadata cell stats. Usage: @@NAME [options]} 
  --[[
        &sec1: total={off}, s={on}
        &cell: default={}, d={,cell}
        &cellname: default={nvl((select /*+result_cache*/ extractvalue(xmltype(a.confval),'/cli-output/context/@cell') from v$cell_config a where a.CELLNAME=b.CELL_NAME and rownum<2),'--TOTAL--') cell}
        &last: {
            default={/*grid={topic="DB Wait Events", max_rows=10,order_by="-ms"}*/
            SELECT substr(event, 1, 32) event, SUM(total_waits) waits, 
                   SUM(TIME_WAITED_MICRO) * 1e-3 ms,null avg
            FROM   gv$system_event
            WHERE  total_waits > 0
            AND    wait_class != 'Idle'
            GROUP  BY wait_class, event},
            
            pred={/*grid={topic="Predicate IO", max_rows=10}*/
            SELECT NAME &cell,SUM(VALUE) VALUE
            FROM   (SELECT &cellname,c.*
                    FROM   v$cell_state b,
                           xmltable('/predio_stats/stats[@type=("predicateio","storidx_global_stats")]/stat[. > 0]' 
                                    passing xmltype(b.statistics_value) columns --
                                    NAME VARCHAR2(41) path '@name',
                                    VALUE NUMBER path '.') c
                    WHERE  statistics_type = 'PREDIO')
            WHERE lower(cell) like lower('%'||:V1||'%') AND VALUE>0
            GROUP BY NAME &cell}
        }
  --]]
]]*/
{
    sql={
    [[/*grid={topic="ASM Stats", max_rows=10,order_by='-gid,-bytes',fixed_title=true}*/
      SELECT   grouping_id(g.name) gid, 
               nvl(g.name,'--TOTAL--') diskgroup &cell, 
               count(DISTINCT ds.inst_id) "INSTANCES",
               count(DISTINCT ds.disk_number) "DISKS",
               count(DISTINCT regexp_replace(ds.path, '.*/', '')) paths,
               SUM(ds.TOTAL_MB)*1024*1024/count(DISTINCT ds.inst_id) TOTAL_SIZE,
               SUM(ds.FREE_MB)*1024*1024/count(DISTINCT ds.inst_id) FREE_SIZE,
               '|' "|",
               SUM(ds.bytes_read + ds.bytes_written) bytes,
               SUM(ds.HOT_BYTES_READ + ds.HOT_BYTES_written) hot_bytes,
               SUM(ds.bytes_read) read,
               SUM(ds.bytes_written) write,
               '|' "|",
               SUM(ds.reads + ds.writes) total_io,
               SUM(ds.reads) READS,
               SUM(ds.writes) writes,
               SUM(ds.READ_ERRS + ds.write_ERRS)*1e3 io_errs,
               SUM(ds.read_time + ds.write_time)*1e3 rw_ms,
               SUM(ds.read_time)*1e3 read_ms,
               SUM(ds.write_time)*1e3 write_ms
        FROM   gv$asm_disk_stat ds, gv$asm_diskgroup_stat g
        WHERE  ds.mount_status = 'CACHED'
        AND    g.inst_id = ds.inst_id
        AND    g.group_number = ds.group_number
        GROUP BY rollup((g.name &cell))]],
    '-',[[/*grid={topic="Cell Throughput",fixed_title=true,order_by='cell'}*/
        SELECT  nvl(c.name,'--TOTAL--') cell,
                flashCacheMode "flashMode",
                round(avg(temperatureReading),2) "Temp(C)",
                round(avg(cpu),2) "CPU(%)",
                GREATEST(SUM(largeio + smallio),SUM(ALLIO)) "AllIO",
                SUM(fd) "FD(%)",
                SUM(largeio) "LIO(%)",
                sum(readio) "Read(%)",
                SUM(smartio) "Smart(%)",
                '|' "|",
                SUM(redo) "Redo",
                SUM(fd_redo) "FL(%)",
                '|' "|",
                SUM(smartio) "SmartIO",
                SUM(fcio) "FC(%)",
                SUM(ccio)-SUM(ccsave) "FCC(%)",
                SUM(ofl_out) "OflOut",
                SUM(sisave) "SiSave",
                SUM(passthru) "Passthru",
                SUM(bandwidth) "Net"
        FROM   (SELECT cell_name,
                       sum(decode(metric_name,'Per Db Bytes of IO',METRIC_VALUE)) allio,
                       sum(decode(metric_name,'Per Db Bytes of IO for Flash',METRIC_VALUE)) fd
                FROM   V$CELL_DB b
                GROUP  BY cell_name) a,
               (SELECT  cell_name,
                        --SUM(DECODE(n, 'Cumulative System CPU ticks', v, 'Cumulative User CPU ticks', v)) cpu,
                        SUM(DECODE(n, 'Flash log redo bytes written to flash', v, 'Flash log redo bytes written to disk', v)) redo,
                        SUM(DECODE(n, 'Flash log redo bytes written to flash', v)) fd_redo,
                        SUM(DECODE(n, 'Network bytes transmitted', v, 'Network bytes received', v)) bandwidth,
                        SUM(DECODE(n, 'Smart IO issued bytes total', v)) smartio,
                        SUM(DECODE(n, 'Large read bytes', v, 'Large write bytes', v)) largeio,
                        SUM(DECODE(n, 'Small read bytes', v, 'Small write bytes', v)) smallio,
                        SUM(DECODE(n, 'Small read bytes', v, 'Large read bytes', v)) readio,
                        SUM(DECODE(n, 'Flash cache write bytes - populate columnar', v, 'Flash cache read bytes - columnar', v)) ccio,
                        SUM(DECODE(n, 'Smart IO bytes read from flash cache', v)) fcio,
                        SUM(DECODE(n, 'Smart IO filtered bytes sent back to database', v)) ofl_out,
                        SUM(DECODE(n, 'Storage Index saved bytes', v)) SIsave,
                        SUM(DECODE(n, 'Flash cache columnar read bytes saved', v)) ccsave,
                        SUM(DECODE(n, 'Smart IO bytes pushed back in passthru mode', v)) passthru
                FROM   (SELECT cell_name, metric_value v, metric_name n FROM v$cell_global)
                GROUP  BY cell_name) bï¼Œ
                (SELECT a.cellname,
                        (SELECT max(0+extractvalue(xmltype(b.statistics_value), '/predio_stats/stats[@type="predicateio"]/stat[@name="current_cell_cpu_utilization"]'))
                         FROM   v$cell_state b
                         WHERE  statistics_type = 'PREDIO'
                         and    b.cell_name=a.cellname) cpu,
                        b.*
                FROM    v$cell_config a,
                        XMLTABLE('/cli-output/cell' PASSING xmltype(a.confval) COLUMNS
                                    name VARCHAR2(300) path 'name',
                                    cpuCount VARCHAR2(300) path 'cpuCount',
                                    temperatureReading VARCHAR2(300) path 'temperatureReading',
                                    flashCacheMode VARCHAR2(300) path 'flashCacheMode') b
                WHERE  conftype = 'CELL') c
        WHERE b.cell_name=c.cellname
        AND   b.cell_name=a.cell_name
        GROUP  BY ROLLUP((c.name,flashCacheMode))]],
    '-',{[[/*grid={topic="Cell Global Stats",height=0}*/
          SELECT substr(METRIC_NAME,1,40) METRIC_NAME &cell, sum(METRIC_VALUE) value,METRIC_TYPE unit
          FROM (select &cellname,b.* from V$CELL_GLOBAL b)
          WHERE METRIC_VALUE>0 
          GROUP BY METRIC_NAME &cell,METRIC_TYPE]],
      '|',{[[/*grid={topic="Cell DB",order_by='-gid,-bytes',max_rows=10,fixed_title=true}*/
        SELECT  grouping_id(src) gid ,
                nvl(src,'--TOTAL--') src &cell,
                count(distinct cell) cells,
                SUM(DECODE(metric_name, 'Per Db Bytes of IO', v, 'Per Db Bytes of IO for Flash', v)) bytes,
                SUM(DECODE(metric_name, 'Per Db Bytes of IO for Flash', v)) fd_bytes,
                0 "Flash(%)",
                SUM(DECODE(metric_name, 'Per Db Number of IOs', v, 'Per Db Number of IOs for Flash', v)) "IOs",
                SUM(DECODE(metric_name, 'Per Db Number of IOs for Flash', v)) fd_io,
                SUM(DECODE(metric_name, 'Per Db Number of large IOs', v, 'Per Db Number of large IOs for Flash', v)) "LIOs",
                SUM(DECODE(metric_name, 'Per Db Number of large IOs for Flash', v)) fd_lio,
                SUM(case when metric_name like '% IO % time%' then v end)*1e-3 avg_ms,
                SUM(case when metric_name like '% IO % time' then v end)*1e-3 hd_ms,
                SUM(case when metric_name like '% IO % time % Flash' then v end)*1e-3 fd_ms
            FROM   (SELECT &cellname,
                           src_Dbname src, COUNT(1) cells, metric_name, SUM(metric_value) v, metric_type
                    FROM   V$CELL_DB b
                    GROUP  BY cell_name,src_Dbname, metric_name, metric_type
                    ORDER  BY 1, 3)
            GROUP  BY grouping sets((src &cell),()) ]],
        '-',{[[/*grid={topic="Cell Reason", max_rows=10}*/
            SELECT nvl(reason_name,'--TOTAL--') reason_name &cell, SUM(metric_value) bytes
            FROM   (SELECT &cellname,
                           reason_name,
                           SUM(metric_value) metric_value
                    FROM   V$CELL_IOREASON b
                    WHERE  metric_type = 'bytes'
                    AND    Metric_value > 0
                    GROUP  BY CELL_NAME, reason_name)
            GROUP  BY reason_name &cell]],
            '+',[[&last]]}},
    }},
    delta_by="waits,ms,Net,AllIO,Smart(%),FD(%),LIO(%),Redo,FL(%),SmartIO,Offload,FCC(%),FC(%),Read(%),OflOut,SiSave,FccSave,Passthru,total_io,io_errs,writes,READS,hot_bytes,bytes,read,write,fd_bytes,fd_read,fd_write,timeouts,rw_ms,read_ms,write_ms,METRIC_VALUE,value,bytes,fd_bytes,ios,fd_io,lios,fd_lio,avg_ms,hd_ms,fd_ms",
    calc_rules={["Flash(%)"]='[fd_bytes]*100/[bytes]',
                 avg='[ms]/[waits]',
                 avg_ms='[avg_ms]/[ios]',
                 hd_ms='[hd_ms]/([ios]-[fd_io])',
                 fd_ms='[fd_ms]/[fd_io]',
                 rw_ms='[rw_ms]/[total_io]',
                 read_ms='[read_ms]/([reads])',
                 write_ms='[write_ms]/[writes]',
                 ["LIO(%)"]='[LIO(%)]*100/[AllIO]',
                 ["Smart(%)"]='[Smart(%)]*100/[AllIO]',
                 ["FD(%)"]='[FD(%)]*100/[AllIO]',
                 ["FL(%)"]='[FL(%)]*100/[Redo]',
                 ["FCC(%)"]='[FCC(%)]*100/[SmartIO]',
                 ["FC(%)"]='[FC(%)]*100/[SmartIO]',
                 ["Read(%)"]='[Read(%)]*100/[AllIO]'},
    column_formatter={KMG='Net,AllIO,Redo,SmartIO,Offload,OflOut,SiSave,FccSave,Passthru,OS_SIZE,TOTAL_SIZE,FREE_SIZE,bytes,hot_bytes,read,write,bytes,fd_bytes,fd_read,fd_write,fd_bytes',
                      TMB='ios,fd_io,lios,fd_lio,total_io,writes,READS,io_errs',
                      smhd2='timeouts',
                     ['#,##0']='value'},
    group_by="event,diskgroup,cell,src,reason_name,METRIC_NAME,NAME"
}
